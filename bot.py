from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, MessageHandler, filters, ContextTypes, ConversationHandler, CommandHandler
import os

# –¢–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–∞
TOKEN = os.getenv("TELEGRAM_TOKEN", "8350872775:AAHAyQAvOooptvSx8xG-QbmgAJpGRvtUaBo")
ADMIN_ID = "6978852648"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
NAME, BUSINESS, GOAL, BUDGET, PHONE = range(5)

# –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –º–µ–Ω—é
def get_menu():
    keyboard = [
        [KeyboardButton("‚ÑπÔ∏è –û–±–æ –º–Ω–µ"), KeyboardButton("üåê –°–æ—Ü—Å–µ—Ç–∏"), KeyboardButton("üìû –ü–æ–¥–µ–ª–∏—Å—å –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'started' not in context.user_data:
        context.user_data['started'] = True
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –õ–µ–æ–Ω–∏–¥ (@shvorob_leonid), —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞.\n\n"
            "–Ø –∑–∞–¥–∞–º —Ç–µ–±–µ 4 –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ.\n"
            "–ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–æ–≤ —è —Å–≤—è–∂—É—Å—å —Å —Ç–æ–±–æ–π, —á—Ç–æ–±—ã –≤—Å—ë –æ–±—Å—É–¥–∏—Ç—å.\n\n"
            "–í–æ–ø—Ä–æ—Å 1 –∏–∑ 4: –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
            reply_markup=get_menu()
        )
        return NAME
    return None

async def name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–í–æ–ø—Ä–æ—Å 2 –∏–∑ 4: –ö–∞–∫–æ–π —É —Ç–µ–±—è –±–∏–∑–Ω–µ—Å? (–ù–∞–ø—Ä–∏–º–µ—Ä, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω, —É—Å–ª—É–≥–∏, –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ)", reply_markup=get_menu())
    return BUSINESS

async def business(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['business'] = update.message.text
    await update.message.reply_text("–í–æ–ø—Ä–æ—Å 3 –∏–∑ 4: –ß—Ç–æ —Ö–æ—á–µ—à—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å? (–ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞—è–≤–∫–∏, —Ä–∞—Å—Å—ã–ª–∫–∏, —É—á–µ—Ç)", reply_markup=get_menu())
    return GOAL

async def goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['goal'] = update.message.text
    await update.message.reply_text("–í–æ–ø—Ä–æ—Å 4 –∏–∑ 4: –ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é? (–ü—Ä–∏–º–µ—Ä: 50-100 —Ç—ã—Å. —Ä—É–±.)", reply_markup=get_menu())
    return BUDGET

async def budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['budget'] = update.message.text
    context.user_data['phone'] = "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await send_admin_notification(update, context)
    
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Å—å.\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=get_menu()
    )
    return PHONE

async def phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.contact:
        context.user_data['phone'] = update.message.contact.phone_number
        await send_admin_notification(update, context)
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –Ω–æ–º–µ—Ä! –Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Å—å.",
            reply_markup=get_menu()
        )
    return PHONE

async def send_admin_notification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.effective_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    user_id = update.effective_user.id
    message = (
        f"üì© –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç!\n"
        f"üÜî Telegram ID: {user_id}\n"
        f"@ –ù–∏–∫: @{username}\n"
        f"üë§ –ò–º—è: {context.user_data['name']}\n"
        f"üè¢ –ë–∏–∑–Ω–µ—Å: {context.user_data['business']}\n"
        f"üéØ –¶–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {context.user_data['goal']}\n"
        f"üí∞ –ë—é–¥–∂–µ—Ç: {context.user_data['budget']}\n"
        f"üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {context.user_data['phone']}"
    )
    await context.bot.send_message(chat_id=ADMIN_ID, text=message)

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø –õ–µ–æ–Ω–∏–¥, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤.\n"
        "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é no-code –∏ low-code —Ä–µ—à–µ–Ω–∏—è, —á—Ç–æ–±—ã —Ç–≤–æ–π –±–∏–∑–Ω–µ—Å —Ä–∞–±–æ—Ç–∞–ª –±—ã—Å—Ç—Ä–µ–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ.",
        reply_markup=get_menu()
    )

async def socials(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n"
        "üí¨ Telegram: @shvorob_leonid\n"
        "üì∏ Instagram: @ShvorobLeonid",
        reply_markup=get_menu()
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=get_menu())
    return ConversationHandler.END

def main():
    app = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
            BUSINESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, business)],
            GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, goal)],
            BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, budget)],
            PHONE: [MessageHandler(filters.CONTACT, phone)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.Regex("^(‚ÑπÔ∏è –û–±–æ –º–Ω–µ)$"), about))
    app.add_handler(MessageHandler(filters.Regex("^(üåê –°–æ—Ü—Å–µ—Ç–∏)$"), socials))
    
    app.run_polling()

if __name__ == "__main__":
    main()
